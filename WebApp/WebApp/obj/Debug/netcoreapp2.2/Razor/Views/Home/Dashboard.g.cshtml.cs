#pragma checksum "C:\Users\AJack Ti\Documents\GitHub\Project-Monitor-Baby\WebApp\WebApp\Views\Home\Dashboard.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "52981cdb52ab16606e4a6c047890ee45911997f9"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Dashboard), @"mvc.1.0.view", @"/Views/Home/Dashboard.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/Dashboard.cshtml", typeof(AspNetCore.Views_Home_Dashboard))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\AJack Ti\Documents\GitHub\Project-Monitor-Baby\WebApp\WebApp\Views\_ViewImports.cshtml"
using WebApp;

#line default
#line hidden
#line 2 "C:\Users\AJack Ti\Documents\GitHub\Project-Monitor-Baby\WebApp\WebApp\Views\_ViewImports.cshtml"
using WebApp.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"52981cdb52ab16606e4a6c047890ee45911997f9", @"/Views/Home/Dashboard.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"fc48f17eb9bac3476d8060730298bf398eb2fa5e", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Dashboard : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("icon"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", new global::Microsoft.AspNetCore.Html.HtmlString("~/image/png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/img/favicon.ico"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/css/bootstrap.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/css/animate.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/css/light-bootstrap-dashboard.css?v=1.4.0"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/css/demo.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/css/pe-icon-7-stroke.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/table.html"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_10 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/typography.html"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_11 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/icons.html"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_12 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/js/jquery.3.2.1.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_13 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", new global::Microsoft.AspNetCore.Html.HtmlString("text/javascript"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_14 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/js/bootstrap.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_15 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/js/chartist.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_16 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/js/bootstrap-notify.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_17 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/js/light-bootstrap-dashboard.js?v=1.4.0"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_18 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/js/demo.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 1 "C:\Users\AJack Ti\Documents\GitHub\Project-Monitor-Baby\WebApp\WebApp\Views\Home\Dashboard.cshtml"
  
    Layout = null;

#line default
#line hidden
            BeginContext(27, 37, true);
            WriteLiteral("\r\n<!doctype html>\r\n<html lang=\"en\">\r\n");
            EndContext();
            BeginContext(64, 2413, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "52981cdb52ab16606e4a6c047890ee45911997f910641", async() => {
                BeginContext(70, 36, true);
                WriteLiteral("\r\n    <meta charset=\"utf-8\" />\r\n    ");
                EndContext();
                BeginContext(106, 68, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "52981cdb52ab16606e4a6c047890ee45911997f911061", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(174, 427, true);
                WriteLiteral(@"
    <meta http-equiv=""X-UA-Compatible"" content=""IE=edge,chrome=1"" />
    <meta http-equiv=""Content-Security-Policy"" content=""upgrade-insecure-requests"">
    <title>Management Project Smart Baby</title>

    <meta content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0' name='viewport' />
    <meta name=""viewport"" content=""width=device-width"" />


    <!-- Bootstrap core CSS     -->
    ");
                EndContext();
                BeginContext(601, 63, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "52981cdb52ab16606e4a6c047890ee45911997f912916", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(664, 60, true);
                WriteLiteral("\r\n\r\n    <!-- Animation library for notifications   -->\r\n    ");
                EndContext();
                BeginContext(724, 61, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "52981cdb52ab16606e4a6c047890ee45911997f914308", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(785, 57, true);
                WriteLiteral("\r\n\r\n    <!--  Light Bootstrap Table core CSS    -->\r\n    ");
                EndContext();
                BeginContext(842, 83, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "52981cdb52ab16606e4a6c047890ee45911997f915697", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(925, 84, true);
                WriteLiteral("\r\n\r\n\r\n    <!--  CSS for Demo Purpose, don\'t include it in your project     -->\r\n    ");
                EndContext();
                BeginContext(1009, 54, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "52981cdb52ab16606e4a6c047890ee45911997f917117", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(1063, 267, true);
                WriteLiteral(@"

    <!--     Fonts and icons     -->
    <link href=""http://maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css"" rel=""stylesheet"">
    <link href='http://fonts.googleapis.com/css?family=Roboto:400,700,300' rel='stylesheet' type='text/css'>
    ");
                EndContext();
                BeginContext(1330, 66, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "52981cdb52ab16606e4a6c047890ee45911997f918718", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_8);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(1396, 1074, true);
                WriteLiteral(@"

    <script src=""https://code.highcharts.com/highcharts.js""></script>
    <script src=""https://code.highcharts.com/modules/series-label.js""></script>
    <script src=""https://code.highcharts.com/modules/exporting.js""></script>
    <script src=""https://code.highcharts.com/modules/export-data.js""></script>

    <base href=""https://demos.telerik.com/kendo-ui/datetimepicker/index"">
    <style>
        html {
            font-size: 14px;
            font-family: Arial, Helvetica, sans-serif;
        }
    </style>
    <title></title>
    <link rel=""stylesheet"" href=""https://kendo.cdn.telerik.com/2019.1.220/styles/kendo.common-material.min.css"" />
    <link rel=""stylesheet"" href=""https://kendo.cdn.telerik.com/2019.1.220/styles/kendo.material.min.css"" />
    <link rel=""stylesheet"" href=""https://kendo.cdn.telerik.com/2019.1.220/styles/kendo.material.mobile.min.css"" />

    <script src=""https://kendo.cdn.telerik.com/2019.1.220/js/jquery.min.js""></script>
    <script src=""https://kendo.cdn.telerik");
                WriteLiteral(".com/2019.1.220/js/kendo.all.min.js\"></script>\r\n\r\n");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(2477, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(2479, 62787, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "52981cdb52ab16606e4a6c047890ee45911997f921991", async() => {
                BeginContext(2485, 1056, true);
                WriteLiteral(@"

    <div class=""wrapper"">
        <div class=""sidebar"" data-color=""purple"" data-image=""/assets/img/sidebar-5.jpg"">

            <div class=""sidebar-wrapper"">
                <div class=""logo"">

                    <div class=""logo"">
                        <a target=""_blank"" href=""https://github.com/AjackTi/Project-Monitor-Baby"" class=""simple-text"">
                            TEAM 4
                        </a>
                    </div>
                </div>

                <ul class=""nav"">
                    <li class=""active"">
                        <a href=/Home/Dashboard"">
                            <i class=""pe-7s-graph""></i>
                            <p>Dashboard</p>
                        </a>
                    </li>
                    <li>
                        <a href=""~/user.html"">
                            <i class=""pe-7s-user""></i>
                            <p>User Profile</p>
                        </a>
                    </li>
                  ");
                WriteLiteral("  <li>\r\n                        ");
                EndContext();
                BeginContext(3541, 153, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "52981cdb52ab16606e4a6c047890ee45911997f923500", async() => {
                    BeginContext(3564, 126, true);
                    WriteLiteral("\r\n                            <i class=\"pe-7s-note2\"></i>\r\n                            <p>Advice</p>\r\n                        ");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_9);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(3694, 79, true);
                WriteLiteral("\r\n                    </li>\r\n                    <li>\r\n                        ");
                EndContext();
                BeginContext(3773, 164, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "52981cdb52ab16606e4a6c047890ee45911997f925090", async() => {
                    BeginContext(3801, 132, true);
                    WriteLiteral("\r\n                            <i class=\"pe-7s-camera\"></i>\r\n                            <p>Live Camera</p>\r\n                        ");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_10);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(3937, 79, true);
                WriteLiteral("\r\n                    </li>\r\n                    <li>\r\n                        ");
                EndContext();
                BeginContext(4016, 158, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "52981cdb52ab16606e4a6c047890ee45911997f926687", async() => {
                    BeginContext(4039, 131, true);
                    WriteLiteral("\r\n                            <i class=\"pe-7s-refresh\"></i>\r\n                            <p>Transform</p>\r\n                        ");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_11);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(4174, 4521, true);
                WriteLiteral(@"
                    </li>
                    <li>
                        <a href=""notifications.html"">
                            <i class=""pe-7s-bell""></i>
                            <p>Notifications</p>
                        </a>
                    </li>
                </ul>
            </div>
        </div>

        <div class=""main-panel"">
            <nav class=""navbar navbar-default navbar-fixed"">
                <div class=""container-fluid"">
                    <div class=""navbar-header"">
                        <button type=""button"" class=""navbar-toggle"" data-toggle=""collapse"" data-target=""#navigation-example-2"">
                            <span class=""sr-only"">Toggle navigation</span>
                            <span class=""icon-bar""></span>
                            <span class=""icon-bar""></span>
                            <span class=""icon-bar""></span>
                        </button>
                        <a class=""navbar-brand"" href=""#"">Dashboard</a>
      ");
                WriteLiteral(@"              </div>
                    <div class=""collapse navbar-collapse"">
                        <ul class=""nav navbar-nav navbar-left"">
                            <li>
                                <a href=""#"" class=""dropdown-toggle"" data-toggle=""dropdown"">
                                    <i class=""fa fa-dashboard""></i>
                                    <p class=""hidden-lg hidden-md"">Dashboard</p>
                                </a>
                            </li>
                            <li class=""dropdown"">
                                <a href=""#"" class=""dropdown-toggle"" data-toggle=""dropdown"">
                                    <i class=""fa fa-globe""></i>
                                    <b class=""caret hidden-lg hidden-md""></b>
                                    <p class=""hidden-lg hidden-md"">
                                        5 Notifications
                                        <b class=""caret""></b>
                                    </p>
       ");
                WriteLiteral(@"                         </a>
                                <ul class=""dropdown-menu"">
                                    <li><a href=""#"">Notification 1</a></li>
                                    <li><a href=""#"">Notification 2</a></li>
                                    <li><a href=""#"">Notification 3</a></li>
                                    <li><a href=""#"">Notification 4</a></li>
                                    <li><a href=""#"">Another notification</a></li>
                                </ul>
                            </li>
                            <li>
                                <a href="""">
                                    <i class=""fa fa-search""></i>
                                    <p class=""hidden-lg hidden-md"">Search</p>
                                </a>
                            </li>
                        </ul>

                        <ul class=""nav navbar-nav navbar-right"">
                            <li class=""dropdown"">
                     ");
                WriteLiteral(@"           <a href=""#"" class=""dropdown-toggle"" data-toggle=""dropdown"">
                                    <p>
                                        Dropdown
                                        <b class=""caret""></b>
                                    </p>

                                </a>
                                <ul class=""dropdown-menu"">
                                    <li><a href=""#"">Action</a></li>
                                    <li><a href=""#"">Another action</a></li>
                                    <li><a href=""#"">Something</a></li>
                                    <li><a href=""#"">Another action</a></li>
                                    <li><a href=""#"">Something</a></li>
                                    <li class=""divider""></li>
                                    <li><a href=""#"">Separated link</a></li>
                                </ul>
                            </li>
                            <li>
                                <a href=""");
                WriteLiteral(@"#"">
                                    <p>Log out</p>
                                </a>
                            </li>
                            <li class=""separator hidden-lg""></li>
                        </ul>
                    </div>
                </div>
            </nav>


            <div class=""content"">
                <div class=""container-fluid"">
                    <div class=""row"">
");
                EndContext();
                BeginContext(8739, 8795, true);
                WriteLiteral(@"                        <div class=""col-md-4"" style=""width: 353px;"">
                            <div class=""card"">

                                <div class=""header"">
                                    <h4 class=""title"">Motion Chart</h4>
                                </div>
                                <div class=""content"" style=""height: 466px;"">
                                    <div id=""motionChart""></div>
                                    <div id=""example"">

                                        <div class=""demo-section k-content"">
                                            <input id=""datetimepickerMotion"" title=""datetimepickerMotion"" style=""width: 100%;"" />
                                        </div>

                                        <script>
                                            $(document).ready(function () {
                                                // create DateTimePicker from input HTML element
                                                $(""");
                WriteLiteral(@"#datetimepickerMotion"").kendoDateTimePicker({
                                                    value: new Date(),
                                                    dateInput: true
                                                });

                                                // prototype replace all
                                                //SELECT * FROM SensorMotion WHERE date(TimeStart) like date('2019-04-30') and date('2019-04-30 14:30:07.534000')

                                                String.prototype.replaceAll = function (search, replacement) {
                                                    var target = this;
                                                    return target.replace(new RegExp(search, 'g'), replacement);
                                                };

                                                var startDate = kendo.toString($(""#datetimepickerMotion"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/dd');
                               ");
                WriteLiteral(@"                 var startTime = kendo.toString($(""#datetimepickerMotion"").data(""kendoDateTimePicker"").value(), 'HH:mm');
                                                //console.log(startDate.replaceAll('/', '-') + ' ' + startTime);
                                                //debugger;
                                                $.ajax({
                                                    type: 'GET',
                                                    dataType: 'json',
                                                    cache: false,
                                                    url: 'https://192.168.1.7:5002/api/sensormotion/' + startDate.replaceAll('/', '-') + ' ' + startTime + '/None',
                                                    contentType: 'application/json; charset=utf-8',
                                                    success: function (result) {
                                                        //console.log(result);
                                    ");
                WriteLiteral(@"                    setupMotionChart(result);
                                                    },
                                                    error: function (result) {
                                                        //console.log(result);
                                                    }

                                                });

                                                $('#datetimepickerMotion').change(function () {
                                                    //debugger;
                                                    var startDate = kendo.toString($(""#datetimepickerMotion"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/dd');
                                                    var startTime = kendo.toString($(""#datetimepickerMotion"").data(""kendoDateTimePicker"").value(), 'HH:mm');
                                                    //console.log('https://192.168.1.7:5002/api/sensormotion/' + startDate.replaceAll('/', '-') + ' ' + startTime + '/");
                WriteLiteral(@"None');
                                                    $.ajax({
                                                        type: 'GET',
                                                        dataType: 'json',
                                                        cache: false,
                                                        url: 'https://192.168.1.7:5002/api/sensormotion/' + startDate.replaceAll('/', '-') + ' ' + startTime + '/None',
                                                        contentType: 'application/json; charset=utf-8',
                                                        success: function (result) {
                                                            //console.log(result);
                                                            setupMotionChart(result);
                                                        },
                                                        error: function (result) {
                                                            //");
                WriteLiteral(@"console.log(result);
                                                        }
                                                    });
                                                });
                                            });
                                        </script>

                                    </div>
                                    <script>
                                        function setupMotionChart(data) {
                                            var startDate = kendo.toString($(""#datetimepickerMotion"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/dd');
                                            var startTime = kendo.toString($(""#datetimepickerMotion"").data(""kendoDateTimePicker"").value(), 'hh:mm tt');

                                            //console.log('Loading ... ');
                                            // Set up the chart
                                            var chart = new Highcharts.Chart({
                                   ");
                WriteLiteral(@"             chart: {
                                                    renderTo: 'motionChart',
                                                    type: 'column',
                                                    options3d: {
                                                        enabled: true,
                                                        alpha: 15,
                                                        beta: 15,
                                                        depth: 50,
                                                        viewDistance: 25
                                                    }
                                                },
                                                title: {
                                                    text: 'Motion detection between ' + startDate + ' ' + startTime + ' And Now'
                                                },
                                                plotOptions: {
                            ");
                WriteLiteral(@"                        column: {
                                                        depth: 25
                                                    }
                                                },
                                                series: [{
                                                    data: data.map(a => a.quantity)
                                                }]
                                            });

                                            function showValues() {
                                                $('#alpha-value').html(chart.options.chart.options3d.alpha);
                                                $('#beta-value').html(chart.options.chart.options3d.beta);
                                                $('#depth-value').html(chart.options.chart.options3d.depth);
                                            }

                                            // Activate the sliders
                                            $('#slid");
                WriteLiteral(@"ers input').on('input change', function () {
                                                chart.options.chart.options3d[this.id] = parseFloat(this.value);
                                                showValues();
                                                chart.redraw(false);
                                            });

                                            showValues();
                                        }

                                    </script>
                                </div>
                            </div>
                        </div>
");
                EndContext();
                BeginContext(17582, 2, true);
                WriteLiteral("\r\n");
                EndContext();
                BeginContext(17628, 11420, true);
                WriteLiteral(@"                        <div class=""col-md-8"">
                            <div class=""card"">
                                <div class=""header"">
                                    <h4 class=""title"">Camera Chart</h4>
                                </div>
                                <div class=""content"">
                                    <div id=""cameraChart""></div>

                                    <div id=""example"">

                                        <div class=""demo-section k-content"">
                                            <div style=""display: inline-block; width: 100%"">
                                                <input id=""datetimepickerCamera1"" title=""datetimepickerCamera1"" style=""width: 50%; float: left;"" />
                                                <input id=""datetimepickerCamera2"" title=""datetimepickerCamera2"" style=""width: 50%; float: right;"" />
                                            </div>
                                        </div>

       ");
                WriteLiteral(@"                                 <script>
                                            $(document).ready(function () {
                                                // create DateTimePicker from input HTML element
                                                $(""#datetimepickerCamera1"").kendoDateTimePicker({
                                                    value: new Date(),
                                                    dateInput: true
                                                });
                                                $(""#datetimepickerCamera2"").kendoDateTimePicker({
                                                    value: new Date(),
                                                    dateInput: true
                                                });

                                                // prototype replace all

                                                String.prototype.replaceAll = function (search, replacement) {
                              ");
                WriteLiteral(@"                      var target = this;
                                                    return target.replace(new RegExp(search, 'g'), replacement);
                                                };

                                                var startDate = kendo.toString($(""#datetimepickerCamera1"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/dd');
                                                var startTime = kendo.toString($(""#datetimepickerCamera1"").data(""kendoDateTimePicker"").value(), 'HH:mm');
                                                var endDate = kendo.toString($(""#datetimepickerCamera2"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/dd');
                                                var endTime = kendo.toString($(""#datetimepickerCamera2"").data(""kendoDateTimePicker"").value(), 'HH:mm');
                                                //console.log(startDate.replaceAll('/', '-') + ' ' + startTime);
                                                //console.log(endDate.repl");
                WriteLiteral(@"aceAll('/', '-') + ' ' + endTime);
                                                //console.log('https://192.168.1.7:5002/api/camera/' + startDate.replaceAll('/', '-') + ' ' + startTime + '/' + endDate.replaceAll('/', '-') + ' ' + endTime);
                                                //debugger;
                                                $.ajax({
                                                    type: 'GET',
                                                    dataType: 'json',
                                                    cache: false,
                                                    url: 'https://192.168.1.7:5002/api/camera/' + startDate.replaceAll('/', '-') + ' ' + startTime + '/' + endDate.replaceAll('/', '-') + ' ' + endTime,
                                                    contentType: 'application/json; charset=utf-8',
                                                    success: function (result) {
                                                        //console.log(re");
                WriteLiteral(@"sult);
                                                        setUpCameraChart(result);
                                                    },
                                                    error: function (result) {
                                                        //console.log(result);
                                                    }

                                                });

                                                $('#datetimepickerCamera1, #datetimepickerCamera2').change(function () {
                                                    //debugger;
                                                    var startDate = kendo.toString($(""#datetimepickerCamera1"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/dd');
                                                    var startTime = kendo.toString($(""#datetimepickerCamera1"").data(""kendoDateTimePicker"").value(), 'HH:mm');
                                                    var endDate = kendo.toString($(""#datetimepi");
                WriteLiteral(@"ckerCamera2"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/dd');
                                                    var endTime = kendo.toString($(""#datetimepickerCamera2"").data(""kendoDateTimePicker"").value(), 'HH:mm');
                                                    //console.log(startDate + ' ' + startTime + ' ' + endDate + ' ' + endTime);
                                                    //console.log('https://192.168.1.7:5002/api/camera/' + startDate.replaceAll('/', '-') + ' ' + startTime + '/' + endDate.replaceAll('/', '-') + ' ' + endTime);
                                                    $.ajax({
                                                        type: 'GET',
                                                        dataType: 'json',
                                                        cache: false,
                                                        url: 'https://192.168.1.7:5002/api/camera/' + startDate.replaceAll('/', '-') + ' ' + startTime + '/' + endDate.replaceAll('/'");
                WriteLiteral(@", '-') + ' ' + endTime,
                                                        contentType: 'application/json; charset=utf-8',
                                                        success: function (result) {
                                                            //console.log(result);
                                                            setUpCameraChart(result);
                                                        },
                                                        error: function (result) {
                                                            //console.log(result);
                                                        }
                                                    });
                                                });
                                            });
                                        </script>

                                    </div>

                                    <script>
                                        functi");
                WriteLiteral(@"on setUpCameraChart(data) {
                                            var startDate = kendo.toString($(""#datetimepickerCamera1"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/dd');
                                            var startTime = kendo.toString($(""#datetimepickerCamera1"").data(""kendoDateTimePicker"").value(), 'hh:mm tt');
                                            var endDate = kendo.toString($(""#datetimepickerCamera2"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/dd');
                                            var endTime = kendo.toString($(""#datetimepickerCamera2"").data(""kendoDateTimePicker"").value(), 'hh:mm tt');

                                            Highcharts.chart('cameraChart', {
                                                chart: {
                                                    type: 'area'
                                                },
                                                title: {
                                                    text: 'Camer");
                WriteLiteral(@"a Detection Between ' + startDate + ' ' + startTime + ' And ' + endDate + ' ' + endTime
                                                },
                                                xAxis: {
                                                    allowDecimals: false,
                                                    labels: {
                                                        formatter: function () {
                                                            return this.value; // clean, unformatted number for year
                                                        }
                                                    }
                                                },
                                                yAxis: {
                                                    title: {
                                                        text: 'Camera Detection Times'
                                                    },
                                                    label");
                WriteLiteral(@"s: {
                                                        formatter: function () {
                                                            return this.value;
                                                        }
                                                    }
                                                },
                                                tooltip: {
                                                    pointFormat: '{series.name} had <b>{point.y:,.0f}</b><br/>time in {point.x}'
                                                },
                                                plotOptions: {
                                                    area: {
                                                        pointStart: 0,
                                                        marker: {
                                                            enabled: false,
                                                            symbol: 'circle',
                            ");
                WriteLiteral(@"                                radius: 2,
                                                            states: {
                                                                hover: {
                                                                    enabled: true
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                series: [{
                                                    name: 'Camera Detection',
                                                    data: data.map(a => a.Parameter),
                                                    color: 'rgba(244, 91, 91, 0.75);'
                                                }]
                                            });
                                        }");
                WriteLiteral("\n                                    </script>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n");
                EndContext();
                BeginContext(29096, 71, true);
                WriteLiteral("                    </div>\r\n\r\n\r\n                    <div class=\"row\">\r\n");
                EndContext();
                BeginContext(29217, 9535, true);
                WriteLiteral(@"                        <div class=""col-md-6"">
                            <div class=""card "">
                                <div class=""header"">
                                    <h4 class=""title"">Sound Chart</h4>
                                    <p class=""category"">Sound Detection</p>
                                    <div id=""soundChart""></div>
                                    <div id=""example"">

                                        <div class=""demo-section k-content"">
                                            <div style=""display: inline-block; width: 100%"">
                                                <input id=""datetimepickerSound1"" title=""datetimepickerSound1"" style=""width: 50%; float: left;"" />
                                                <input id=""datetimepickerSound2"" title=""datetimepickerSound2"" style=""width: 50%; float: right;"" />
                                            </div>
                                        </div>

                                ");
                WriteLiteral(@"        <script>
                                            $(document).ready(function () {
                                                // create DateTimePicker from input HTML element
                                                $(""#datetimepickerSound1"").kendoDateTimePicker({
                                                    value: new Date(),
                                                    dateInput: true
                                                });

                                                $(""#datetimepickerSound2"").kendoDateTimePicker({
                                                    value: new Date(),
                                                    dateInput: true
                                                });

                                                String.prototype.replaceAll = function (search, replacement) {
                                                    var target = this;
                                                    return ");
                WriteLiteral(@"target.replace(new RegExp(search, 'g'), replacement);
                                                };

                                                var startDate = kendo.toString($(""#datetimepickerSound1"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/dd');
                                                var startTime = kendo.toString($(""#datetimepickerSound1"").data(""kendoDateTimePicker"").value(), 'HH:mm');
                                                var endDate = kendo.toString($(""#datetimepickerSound2"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/dd');
                                                var endTime = kendo.toString($(""#datetimepickerSound2"").data(""kendoDateTimePicker"").value(), 'HH:mm');
                                                //console.log('https://192.168.1.7:5002/api/sensorsound/' + startDate.replaceAll('/', '-') + ' ' + startTime + '/' + endDate.replaceAll('/', '-') + ' ' + endTime);

                                                //debugger;
                 ");
                WriteLiteral(@"                               $.ajax({
                                                    type: 'GET',
                                                    dataType: 'json',
                                                    cache: false,
                                                    url: 'https://192.168.1.7:5002/api/sensorsound/' + startDate.replaceAll('/', '-') + ' ' + startTime + '/' + endDate.replaceAll('/', '-') + ' ' + endTime,
                                                    contentType: 'application/json; charset=utf-8',
                                                    success: function (result) {
                                                        //console.log(result);
                                                        setUpSoundChart(result);
                                                    },
                                                    error: function (result) {
                                                        //console.log(result);
           ");
                WriteLiteral(@"                                         }

                                                });

                                                $('#datetimepickerSound1, #datetimepickerSound2').change(function () {
                                                    //debugger;
                                                    var startDate = kendo.toString($(""#datetimepickerSound1"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/dd');
                                                    var startTime = kendo.toString($(""#datetimepickerSound1"").data(""kendoDateTimePicker"").value(), 'HH:mm');
                                                    var endDate = kendo.toString($(""#datetimepickerSound2"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/dd');
                                                    var endTime = kendo.toString($(""#datetimepickerSound2"").data(""kendoDateTimePicker"").value(), 'HH:mm');
                                                    //console.log(startDate + ' ' + startTime + ' ' ");
                WriteLiteral(@"+ endDate + ' ' + endTime);
                                                    //console.log('https://192.168.1.7:5002/api/sensorsound/' + startDate.replaceAll('/', '-') + ' ' + startTime + '/' + endDate.replaceAll('/', '-') + ' ' + endTime);
                                                    $.ajax({
                                                        type: 'GET',
                                                        dataType: 'json',
                                                        cache: false,
                                                        url: 'https://192.168.1.7:5002/api/sensorsound/' + startDate.replaceAll('/', '-') + ' ' + startTime + '/' + endDate.replaceAll('/', '-') + ' ' + endTime,
                                                        contentType: 'application/json; charset=utf-8',
                                                        success: function (result) {
                                                            //console.log(result);
              ");
                WriteLiteral(@"                                              setUpSoundChart(result);
                                                        },
                                                        error: function (result) {
                                                            //console.log(result);
                                                        }
                                                    });
                                                });
                                            });
                                        </script>

                                    </div>
                                </div>
                                <script>
                                    function setUpSoundChart(data) {
                                        var startDate = kendo.toString($(""#datetimepickerSound1"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/dd');
                                        var startTime = kendo.toString($(""#datetimepickerSound1"").data(""ke");
                WriteLiteral(@"ndoDateTimePicker"").value(), 'hh:mm tt');
                                        var endDate = kendo.toString($(""#datetimepickerSound2"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/dd');
                                        var endTime = kendo.toString($(""#datetimepickerSound2"").data(""kendoDateTimePicker"").value(), 'hh:mm tt');


                                        Highcharts.chart('soundChart', {
                                            chart: {
                                                type: 'line'
                                            },
                                            title: {
                                                text: 'Sound Sensor Between ' + startDate + ' ' + startTime + ' And ' + endDate + ' ' + endTime
                                            },
                                            xAxis: {
                                                categories: data.map(a => a.TimeStart.split(' ')[1].toString('hh:MM:ss TT'))
                ");
                WriteLiteral(@"                            },
                                            yAxis: {
                                                title: {
                                                    text: 'Sound Sensor Times'
                                                }
                                            },
                                            plotOptions: {
                                                line: {
                                                    dataLabels: {
                                                        enabled: true
                                                    },
                                                    enableMouseTracking: false
                                                }
                                            },
                                            series: [{
                                                name: 'Sound Sensor',
                                                data: data.map(a => a.Parameter),
 ");
                WriteLiteral(@"                                               color: 'rgb(169, 255, 151)'
                                            }]
                                        });
                                    }
                                </script>
                            </div>
                        </div>
");
                EndContext();
                BeginContext(38806, 2, true);
                WriteLiteral("\r\n");
                EndContext();
                BeginContext(38857, 16540, true);
                WriteLiteral(@"                        <div class=""col-md-6"">
                            <div class=""card "">
                                <div class=""header"">
                                    <h4 class=""title"">Combination Chart</h4>
                                </div>
                                <div class=""content"" style=""height: 462px"">
                                    <div class=""table-full-width"">
                                        <div id=""combinationChart""></div>

                                        <div id=""example"">

                                            <div class=""demo-section k-content"">
                                                <div style=""display: inline-block; width: 100%"">
                                                    <input id=""datetimepickerCombination1"" title=""datetimepickerCombination1"" style=""width: 50%; float: left;"" />
                                                    <input id=""datetimepickerCombination2"" title=""datetimepickerCombination2"" st");
                WriteLiteral(@"yle=""width: 50%; float: right;"" />
                                                </div>
                                            </div>

                                            <script>
                                                $(document).ready(function () {
                                                    // create DateTimePicker from input HTML element
                                                    $(""#datetimepickerCombination1"").kendoDateTimePicker({
                                                        value: new Date(),
                                                        dateInput: true
                                                    });

                                                    $(""#datetimepickerCombination2"").kendoDateTimePicker({
                                                        value: new Date(),
                                                        dateInput: true
                                                    });

         ");
                WriteLiteral(@"                                           var startDate = kendo.toString($(""#datetimepickerCombination1"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/dd');
                                                    var startTime = kendo.toString($(""#datetimepickerCombination1"").data(""kendoDateTimePicker"").value(), 'HH:mm');
                                                    var endDate = kendo.toString($(""#datetimepickerCombination2"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/dd');
                                                    var endTime = kendo.toString($(""#datetimepickerCombination2"").data(""kendoDateTimePicker"").value(), 'HH:mm');

                                                    debugger;

                                                    var arrSoundSensor = [];
                                                    var arrMotionSensor = [];
                                                    var arrCamera = [];


                                                    $(""#datetimepicker");
                WriteLiteral(@"Combination1, #datetimepickerCombination2"").change(function () {
                                                        debugger;
                                                        console.log('https://192.168.1.7:5002/api/sensorsound/' + startDate.replaceAll('/', '-') + ' ' + startTime + '/' + endDate.replaceAll('/', '-') + ' ' + endTime);
                                                        // Get Data Of Sound Sensor
                                                        $.ajax({
                                                            type: 'GET',
                                                            dataType: 'json',
                                                            cache: false,
                                                            url: 'https://192.168.1.7:5002/api/sensorsound/' + startDate.replaceAll('/', '-') + ' ' + startTime + '/' + endDate.replaceAll('/', '-') + ' ' + endTime,
                                                            contentType: 'appl");
                WriteLiteral(@"ication/json; charset=utf-8',
                                                            success: function (result) {
                                                                arrSoundSensor = result;
                                                                console.log(result);
                                                            },
                                                            error: function (result) {
                                                                console.log(result);
                                                            }

                                                        });
                                                        // Get Data Of Camera
                                                        $.ajax({
                                                            type: 'GET',
                                                            dataType: 'json',
                                                            cache");
                WriteLiteral(@": false,
                                                            url: 'https://192.168.1.7:5002/api/camera/' + startDate.replaceAll('/', '-') + ' ' + startTime + '/' + endDate.replaceAll('/', '-') + ' ' + endTime,
                                                            contentType: 'application/json; charset=utf-8',
                                                            success: function (result) {
                                                                arrCamera = result;
                                                                console.log(result);
                                                            },
                                                            error: function (result) {
                                                                console.log(result);
                                                            }
                                                        });
                                                        // Get Data Of M");
                WriteLiteral(@"otion Sensor
                                                        $.ajax({
                                                            type: 'GET',
                                                            dataType: 'json',
                                                            cache: false,
                                                            url: 'https://192.168.1.7:5002/api/sensormotion/' + startDate.replaceAll('/', '-') + ' ' + startTime + '/None',
                                                            contentType: 'application/json; charset=utf-8',
                                                            success: function (result) {
                                                                arrMotionSensor = result;
                                                                console.log(result);
                                                            },
                                                            error: function (result) {
               ");
                WriteLiteral(@"                                                 console.log(result);
                                                            }
                                                        });
                                                    })

                                                    // Get Data Of Sound Sensor
                                                    $.ajax({
                                                        type: 'GET',
                                                        dataType: 'json',
                                                        cache: false,
                                                        url: 'https://192.168.1.7:5002/api/sensorsound/' + startDate.replaceAll('/', '-') + ' ' + startTime + '/' + endDate.replaceAll('/', '-') + ' ' + endTime,
                                                        contentType: 'application/json; charset=utf-8',
                                                        success: function (result) {
          ");
                WriteLiteral(@"                                                  arrSoundSensor = result;
                                                            console.log(result);
                                                        },
                                                        error: function (result) {
                                                            console.log(result);
                                                        }

                                                    });
                                                    // Get Data Of Camera
                                                    $.ajax({
                                                        type: 'GET',
                                                        dataType: 'json',
                                                        cache: false,
                                                        url: 'https://192.168.1.7:5002/api/camera/' + startDate.replaceAll('/', '-') + ' ' + startTime + '/' + endDate.re");
                WriteLiteral(@"placeAll('/', '-') + ' ' + endTime,
                                                        contentType: 'application/json; charset=utf-8',
                                                        success: function (result) {
                                                            arrCamera = result;
                                                            console.log(result);
                                                        },
                                                        error: function (result) {
                                                            console.log(result);
                                                        }
                                                    });
                                                    // Get Data Of Motion Sensor
                                                    $.ajax({
                                                        type: 'GET',
                                                        dataType: 'json',
  ");
                WriteLiteral(@"                                                      cache: false,
                                                        url: 'https://192.168.1.7:5002/api/sensormotion/' + startDate.replaceAll('/', '-') + ' ' + startTime + '/None',
                                                        contentType: 'application/json; charset=utf-8',
                                                        success: function (result) {
                                                            arrMotionSensor = result;
                                                            console.log(result);
                                                        },
                                                        error: function (result) {
                                                            console.log(result);
                                                        }
                                                    });

                                                    // Calculate average of them
");
                WriteLiteral(@"                                                    Array.prototype.sum = function (prop) {
                                                        var total = 0
                                                        for (var i = 0, _len = this.length; i < _len; i++) {
                                                            total += this[i][prop]
                                                        }
                                                        return total
                                                    }

                                                    var total = arrMotionSensor.sum(""Quantity"") + arrCamera.sum(""Parameter"") + arrSoundSensor.sum(""Parameter"");

                                                    var arrResult =
                                                        [
                                                            {
                                                                name: ""Motion"",
                                             ");
                WriteLiteral(@"                   y: total / arrMotionSensor.sum(""Quantity"")
                                                            },
                                                            {
                                                                name: ""Camera"",
                                                                y: total / arrCamera.sum(""Parameter"")
                                                            },
                                                            {
                                                                name: ""Sound"",
                                                                y: total / arrSoundSensor.sum(""Parameter"")
                                                            }
                                                        ]

                                                    setUpCombinationChart(arrResult);
                                                });
                                            </script>

              ");
                WriteLiteral(@"                          </div>
                                    </div>
                                </div>
                                <script>
                                    function setUpCombinationChart(data) {
                                        var startDate = kendo.toString($(""#datetimepickerCombination1"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/dd');
                                        var startTime = kendo.toString($(""#datetimepickerCombination1"").data(""kendoDateTimePicker"").value(), 'hh:mm tt');
                                        var endDate = kendo.toString($(""#datetimepickerCombination2"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/dd');
                                        var endTime = kendo.toString($(""#datetimepickerCombination2"").data(""kendoDateTimePicker"").value(), 'hh:mm tt');

                                        Highcharts.chart('combinationChart', {
                                            chart: {
                                ");
                WriteLiteral(@"                plotBackgroundColor: null,
                                                plotBorderWidth: null,
                                                plotShadow: false,
                                                type: 'pie'
                                            },
                                            title: {
                                                text: 'Combination 2 Sensors And A Camera Between ' + startDate + ' ' + startTime + ' And ' + endDate + ' ' + endTime
                                            },
                                            tooltip: {
                                                pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
                                            },
                                            plotOptions: {
                                                pie: {
                                                    allowPointSelect: true,
                                                    cur");
                WriteLiteral(@"sor: 'pointer',
                                                    dataLabels: {
                                                        enabled: true,
                                                        format: '<b>{point.name}</b>: {point.percentage:.1f} %',
                                                        style: {
                                                            color: (Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black'
                                                        }
                                                    }
                                                }
                                            },
                                            series: [{
                                                name: 'Brands',
                                                colorByPoint: true,
                                                data: data
                                            }]
                                        }");
                WriteLiteral(");\r\n\r\n                                    }\r\n                                </script>\r\n                            </div>\r\n                        </div>\r\n");
                EndContext();
                BeginContext(55450, 2, true);
                WriteLiteral("\r\n");
                EndContext();
                BeginContext(65143, 116, true);
                WriteLiteral("                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    </div>\r\n\r\n\r\n");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(65266, 32, true);
            WriteLiteral("\r\n\r\n<!--   Core JS Files   -->\r\n");
            EndContext();
            BeginContext(65298, 78, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "52981cdb52ab16606e4a6c047890ee45911997f983281", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_12);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(65376, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(65378, 75, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "52981cdb52ab16606e4a6c047890ee45911997f984548", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(65453, 29, true);
            WriteLiteral("\r\n\r\n<!--  Charts Plugin -->\r\n");
            EndContext();
            BeginContext(65482, 51, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "52981cdb52ab16606e4a6c047890ee45911997f985847", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(65533, 39, true);
            WriteLiteral("\r\n\r\n<!--  Notifications Plugin    -->\r\n");
            EndContext();
            BeginContext(65572, 55, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "52981cdb52ab16606e4a6c047890ee45911997f987072", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(65627, 248, true);
            WriteLiteral("\r\n\r\n<!--  Google Maps Plugin    -->\r\n<script type=\"text/javascript\" src=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyCdanJlxl4OLIxvUC5IXfH2E-rYKuROMwU\"></script>\r\n\r\n<!-- Light Bootstrap Table Core javascript and methods for Demo purpose -->\r\n");
            EndContext();
            BeginContext(65875, 72, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "52981cdb52ab16606e4a6c047890ee45911997f988517", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_17);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(65947, 84, true);
            WriteLiteral("\r\n\r\n<!-- Light Bootstrap Table DEMO methods, don\'t include it in your project! -->\r\n");
            EndContext();
            BeginContext(66031, 43, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "52981cdb52ab16606e4a6c047890ee45911997f989788", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_18);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(66074, 13, true);
            WriteLiteral("\r\n\r\n</html>\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
