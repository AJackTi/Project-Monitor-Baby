#pragma checksum "C:\Users\AJack Ti\Documents\GitHub\Project-Monitor-Baby\WebApplication\WebApplication\Views\Home\Dashboard.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "4fdbb8a5be85ff13fa40e42cbe302c6cb58c1dc2"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Dashboard), @"mvc.1.0.view", @"/Views/Home/Dashboard.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Home/Dashboard.cshtml", typeof(AspNetCore.Views_Home_Dashboard))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Users\AJack Ti\Documents\GitHub\Project-Monitor-Baby\WebApplication\WebApplication\Views\_ViewImports.cshtml"
using WebApplication;

#line default
#line hidden
#line 2 "C:\Users\AJack Ti\Documents\GitHub\Project-Monitor-Baby\WebApplication\WebApplication\Views\_ViewImports.cshtml"
using WebApplication.Models;

#line default
#line hidden
#line 1 "C:\Users\AJack Ti\Documents\GitHub\Project-Monitor-Baby\WebApplication\WebApplication\Views\Home\Dashboard.cshtml"
using WebApplication.Common;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4fdbb8a5be85ff13fa40e42cbe302c6cb58c1dc2", @"/Views/Home/Dashboard.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"fa0ef8da47a84ffb33e8bc853509aa4fa5703a26", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Dashboard : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("icon"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", new global::Microsoft.AspNetCore.Html.HtmlString("~/image/png"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/img/favicon.ico"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/css/bootstrap.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/css/animate.min.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/css/light-bootstrap-dashboard.css?v=1.4.0"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/css/demo.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/css/pe-icon-7-stroke.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_9 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/typography.html"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_10 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/js/jquery.3.2.1.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_11 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("type", new global::Microsoft.AspNetCore.Html.HtmlString("text/javascript"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_12 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/js/bootstrap.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_13 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/js/chartist.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_14 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/js/bootstrap-notify.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_15 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/js/light-bootstrap-dashboard.js?v=1.4.0"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_16 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/assets/js/demo.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 2 "C:\Users\AJack Ti\Documents\GitHub\Project-Monitor-Baby\WebApplication\WebApplication\Views\Home\Dashboard.cshtml"
  
    Layout = null;

#line default
#line hidden
            BeginContext(58, 37, true);
            WriteLiteral("\r\n<!doctype html>\r\n<html lang=\"en\">\r\n");
            EndContext();
            BeginContext(95, 2480, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "4fdbb8a5be85ff13fa40e42cbe302c6cb58c1dc210203", async() => {
                BeginContext(101, 36, true);
                WriteLiteral("\r\n    <meta charset=\"utf-8\" />\r\n    ");
                EndContext();
                BeginContext(137, 68, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagOnly, "4fdbb8a5be85ff13fa40e42cbe302c6cb58c1dc210624", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(205, 427, true);
                WriteLiteral(@"
    <meta http-equiv=""X-UA-Compatible"" content=""IE=edge,chrome=1"" />
    <meta http-equiv=""Content-Security-Policy"" content=""upgrade-insecure-requests"">
    <title>Management Project Smart Baby</title>

    <meta content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0' name='viewport' />
    <meta name=""viewport"" content=""width=device-width"" />


    <!-- Bootstrap core CSS     -->
    ");
                EndContext();
                BeginContext(632, 63, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "4fdbb8a5be85ff13fa40e42cbe302c6cb58c1dc212479", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(695, 60, true);
                WriteLiteral("\r\n\r\n    <!-- Animation library for notifications   -->\r\n    ");
                EndContext();
                BeginContext(755, 61, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "4fdbb8a5be85ff13fa40e42cbe302c6cb58c1dc213871", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(816, 57, true);
                WriteLiteral("\r\n\r\n    <!--  Light Bootstrap Table core CSS    -->\r\n    ");
                EndContext();
                BeginContext(873, 83, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "4fdbb8a5be85ff13fa40e42cbe302c6cb58c1dc215260", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(956, 84, true);
                WriteLiteral("\r\n\r\n\r\n    <!--  CSS for Demo Purpose, don\'t include it in your project     -->\r\n    ");
                EndContext();
                BeginContext(1040, 54, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "4fdbb8a5be85ff13fa40e42cbe302c6cb58c1dc216680", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(1094, 267, true);
                WriteLiteral(@"

    <!--     Fonts and icons     -->
    <link href=""http://maxcdn.bootstrapcdn.com/font-awesome/4.2.0/css/font-awesome.min.css"" rel=""stylesheet"">
    <link href='http://fonts.googleapis.com/css?family=Roboto:400,700,300' rel='stylesheet' type='text/css'>
    ");
                EndContext();
                BeginContext(1361, 66, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "4fdbb8a5be85ff13fa40e42cbe302c6cb58c1dc218281", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_8);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(1427, 1141, true);
                WriteLiteral(@"

    <script src=""https://code.highcharts.com/highcharts.js""></script>
    <script src=""https://code.highcharts.com/modules/series-label.js""></script>
    <script src=""https://code.highcharts.com/modules/exporting.js""></script>
    <script src=""https://code.highcharts.com/modules/export-data.js""></script>

    <base href=""https://demos.telerik.com/kendo-ui/datetimepicker/index"">
    <base href=""https://demos.telerik.com/kendo-ui/window/index"">
    <style>
        html {
            font-size: 14px;
            font-family: Arial, Helvetica, sans-serif;
        }
    </style>
    <title></title>
    <link rel=""stylesheet"" href=""https://kendo.cdn.telerik.com/2019.1.220/styles/kendo.common-material.min.css"" />
    <link rel=""stylesheet"" href=""https://kendo.cdn.telerik.com/2019.1.220/styles/kendo.material.min.css"" />
    <link rel=""stylesheet"" href=""https://kendo.cdn.telerik.com/2019.1.220/styles/kendo.material.mobile.min.css"" />

    <script src=""https://kendo.cdn.telerik.com/2019.1.220/js/j");
                WriteLiteral("query.min.js\"></script>\r\n    <script src=\"https://kendo.cdn.telerik.com/2019.1.220/js/kendo.all.min.js\"></script>\r\n\r\n");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(2575, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(2577, 64920, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "4fdbb8a5be85ff13fa40e42cbe302c6cb58c1dc221625", async() => {
                BeginContext(2583, 2, true);
                WriteLiteral("\r\n");
                EndContext();
#line 60 "C:\Users\AJack Ti\Documents\GitHub\Project-Monitor-Baby\WebApplication\WebApplication\Views\Home\Dashboard.cshtml"
      
    var ipAddress = "https://" + Common.ipRas;

    

#line default
#line hidden
                BeginContext(2650, 1350, true);
                WriteLiteral(@"    <div class=""wrapper"">
        <div class=""sidebar"" data-color=""purple"" data-image=""/assets/img/sidebar-5.jpg"">

            <div class=""sidebar-wrapper"">
                <div class=""logo"">

                    <div class=""logo"">
                        <a target=""_blank"" href=""https://github.com/AjackTi/Project-Monitor-Baby"" class=""simple-text"">
                            TEAM 4
                        </a>
                    </div>
                </div>

                <ul class=""nav"">
                    <li class=""active"">
                        <a href=""https://localhost:5001/Home/Dashboard"">
                            <i class=""pe-7s-graph""></i>
                            <p>Dashboard</p>
                        </a>
                    </li>
                    <li>
                        <a href=""https://localhost:5001/Home/Login"">
                            <i class=""pe-7s-user""></i>
                            <p>User Profile</p>
                        </a>
    ");
                WriteLiteral(@"                </li>
                    <li>
                        <a id=""adviceClick"" style=""cursor: pointer"">
                            <i class=""pe-7s-note2""></i>
                            <p>Advice</p>
                        </a>
                    </li>
                    <li>
                        ");
                EndContext();
                BeginContext(4000, 164, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("a", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "4fdbb8a5be85ff13fa40e42cbe302c6cb58c1dc223771", async() => {
                    BeginContext(4028, 132, true);
                    WriteLiteral("\r\n                            <i class=\"pe-7s-camera\"></i>\r\n                            <p>Live Camera</p>\r\n                        ");
                    EndContext();
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_9);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(4164, 751, true);
                WriteLiteral(@"
                    </li>
                    <li>
                        <a href=""https://localhost:5001/Home/Transform"">
                            <i class=""pe-7s-refresh""></i>
                            <p>Transform</p>
                        </a>
                    </li>
                    <li>
                        <a href=""notifications.html"">
                            <i class=""pe-7s-bell""></i>
                            <p>Notifications</p>
                        </a>
                    </li>
                </ul>
            </div>
        </div>

        <div class=""main-panel"">
            <div class=""content"">
                <div class=""container-fluid"">
                    <div class=""row"">
");
                EndContext();
                BeginContext(4959, 3412, true);
                WriteLiteral(@"                        <div class=""col-md-6"">
                            <div class=""card"">

                                <div class=""header"">
                                    <h4 class=""title"">Motion Chart</h4>
                                </div>
                                <div class=""content"" style=""height: 466px;"">
                                    <div id=""motionChart""></div>
                                    <div id=""example"">

                                        <div class=""demo-section k-content"">
                                            <input id=""datetimepickerMotion1"" title=""datetimepickerMotion1"" style=""width: 50%; float: left;"" />
                                            <input id=""datetimepickerMotion2"" title=""datetimepickerMotion2"" style=""width: 50%; float: left;"" />
                                        </div>

                                        <script>
                                            $(document).ready(function () {
            ");
                WriteLiteral(@"                                    // create DateTimePicker from input HTML element
                                                $(""#datetimepickerMotion1"").kendoDateTimePicker({
                                                    value: new Date(),
                                                    dateInput: true
                                                });

                                                $(""#datetimepickerMotion2"").kendoDateTimePicker({
                                                    value: new Date(),
                                                    dateInput: true
                                                });

                                                // prototype replace all
                                                //SELECT * FROM SensorMotion WHERE date(TimeStart) like date('2019-04-30') and date('2019-04-30 14:30:07.534000')

                                                String.prototype.replaceAll = function (search, replacement) ");
                WriteLiteral(@"{
                                                    var target = this;
                                                    return target.replace(new RegExp(search, 'g'), replacement);
                                                };

                                                var startDate = kendo.toString($(""#datetimepickerMotion1"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/dd');
                                                var startTime = kendo.toString($(""#datetimepickerMotion1"").data(""kendoDateTimePicker"").value(), 'HH:mm');
                                                var endDate = kendo.toString($(""#datetimepickerMotion2"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/dd');
                                                var endTime = kendo.toString($(""#datetimepickerMotion2"").data(""kendoDateTimePicker"").value(), 'HH:mm');
                                                //console.log(startDate.replaceAll('/', '-') + ' ' + startTime);
                                         ");
                WriteLiteral(@"       //debugger;
                                                $.ajax({
                                                    type: 'GET',
                                                    dataType: 'json',
                                                    cache: false,
                                                    url: '");
                EndContext();
                BeginContext(8372, 9, false);
#line 169 "C:\Users\AJack Ti\Documents\GitHub\Project-Monitor-Baby\WebApplication\WebApplication\Views\Home\Dashboard.cshtml"
                                                     Write(ipAddress);

#line default
#line hidden
                EndContext();
                BeginContext(8381, 1697, true);
                WriteLiteral(@":5002/api/sensormotion/' + startDate.replaceAll('/', '-') + ' ' + startTime + '/' + endDate.replaceAll('/', '-') + ' ' + endTime,
                                                    contentType: 'application/json; charset=utf-8',
                                                    success: function (result) {
                                                        //console.log(result);
                                                        setupMotionChart(result);
                                                    },
                                                    error: function (result) {
                                                        //console.log(result);
                                                    }

                                                });

                                                $('#datetimepickerMotion1, #datetimepickerMotion2').change(function () {
                                                    debugger;
                                  ");
                WriteLiteral(@"                  var startDate = kendo.toString($(""#datetimepickerMotion1"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/dd');
                                                    var startTime = kendo.toString($(""#datetimepickerMotion1"").data(""kendoDateTimePicker"").value(), 'HH:mm');
                                                    var endDate = kendo.toString($(""#datetimepickerMotion2"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/dd');
                                                    var endTime = kendo.toString($(""#datetimepickerMotion2"").data(""kendoDateTimePicker"").value(), 'HH:mm');
                                                    console.log('");
                EndContext();
                BeginContext(10079, 9, false);
#line 187 "C:\Users\AJack Ti\Documents\GitHub\Project-Monitor-Baby\WebApplication\WebApplication\Views\Home\Dashboard.cshtml"
                                                            Write(ipAddress);

#line default
#line hidden
                EndContext();
                BeginContext(10088, 472, true);
                WriteLiteral(@":5002/api/sensormotion/' + startDate.replaceAll('/', '-') + ' ' + startTime + '/' + endDate.replaceAll('/', '-') + ' ' + endTime);
                                                    $.ajax({
                                                        type: 'GET',
                                                        dataType: 'json',
                                                        cache: false,
                                                        url: '");
                EndContext();
                BeginContext(10561, 9, false);
#line 192 "C:\Users\AJack Ti\Documents\GitHub\Project-Monitor-Baby\WebApplication\WebApplication\Views\Home\Dashboard.cshtml"
                                                         Write(ipAddress);

#line default
#line hidden
                EndContext();
                BeginContext(10570, 4663, true);
                WriteLiteral(@":5002/api/sensormotion/' + startDate.replaceAll('/', '-') + ' ' + startTime + '/' + endDate.replaceAll('/', '-') + ' ' + endTime,
                                                        contentType: 'application/json; charset=utf-8',
                                                        success: function (result) {
                                                            //console.log(result);
                                                            setupMotionChart(result);
                                                        },
                                                        error: function (result) {
                                                            //console.log(result);
                                                        }
                                                    });
                                                });
                                            });
                                        </script>

                                ");
                WriteLiteral(@"    </div>
                                    <script>
                                        function setupMotionChart(data) {
                                            var startDate = kendo.toString($(""#datetimepickerMotion1"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/dd');
                                            var startTime = kendo.toString($(""#datetimepickerMotion1"").data(""kendoDateTimePicker"").value(), 'hh:mm tt');
                                            var endDate = kendo.toString($(""#datetimepickerMotion2"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/dd');
                                            var endTime = kendo.toString($(""#datetimepickerMotion2"").data(""kendoDateTimePicker"").value(), 'hh:mm tt');
                                            //console.log('Loading ... ');
                                            // Set up the chart
                                            var chart = new Highcharts.Chart({
                                                chart:");
                WriteLiteral(@" {
                                                    renderTo: 'motionChart',
                                                    type: 'column',
                                                    options3d: {
                                                        enabled: true,
                                                        alpha: 15,
                                                        beta: 15,
                                                        depth: 50,
                                                        viewDistance: 25
                                                    }
                                                },
                                                title: {
                                                    text: 'Motion detection between ' + startDate + ' ' + startTime + ' And ' + endDate + ' ' + endTime
                                                },
                                                plotOptions: {
                        ");
                WriteLiteral(@"                            column: {
                                                        depth: 25
                                                    }
                                                },
                                                series: [{
                                                    data: data.map(a => a.quantity)
                                                }]
                                            });

                                            function showValues() {
                                                $('#alpha-value').html(chart.options.chart.options3d.alpha);
                                                $('#beta-value').html(chart.options.chart.options3d.beta);
                                                $('#depth-value').html(chart.options.chart.options3d.depth);
                                            }

                                            // Activate the sliders
                                            $('#");
                WriteLiteral(@"sliders input').on('input change', function () {
                                                chart.options.chart.options3d[this.id] = parseFloat(this.value);
                                                showValues();
                                                chart.redraw(false);
                                            });

                                            showValues();
                                        }</script>
                                </div>
                            </div>
                        </div>
");
                EndContext();
                BeginContext(15281, 2, true);
                WriteLiteral("\r\n");
                EndContext();
                BeginContext(15327, 3171, true);
                WriteLiteral(@"                        <div class=""col-md-6"">
                            <div class=""card"">
                                <div class=""header"">
                                    <h4 class=""title"">Camera Chart</h4>
                                </div>
                                <div class=""content"">
                                    <div id=""cameraChart""></div>

                                    <div id=""example"">

                                        <div class=""demo-section k-content"">
                                            <div style=""display: inline-block; width: 100%"">
                                                <input id=""datetimepickerCamera1"" title=""datetimepickerCamera1"" style=""width: 50%; float: left;"" />
                                                <input id=""datetimepickerCamera2"" title=""datetimepickerCamera2"" style=""width: 50%; float: right;"" />
                                            </div>
                                        </div>

       ");
                WriteLiteral(@"                                 <script>
                                            $(document).ready(function () {
                                                // create DateTimePicker from input HTML element
                                                $(""#datetimepickerCamera1"").kendoDateTimePicker({
                                                    value: new Date(),
                                                    dateInput: true
                                                });
                                                $(""#datetimepickerCamera2"").kendoDateTimePicker({
                                                    value: new Date(),
                                                    dateInput: true
                                                });

                                                // prototype replace all

                                                String.prototype.replaceAll = function (search, replacement) {
                              ");
                WriteLiteral(@"                      var target = this;
                                                    return target.replace(new RegExp(search, 'g'), replacement);
                                                };

                                                var startDate = kendo.toString($(""#datetimepickerCamera1"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/dd');
                                                var startTime = kendo.toString($(""#datetimepickerCamera1"").data(""kendoDateTimePicker"").value(), 'HH:mm');
                                                var endDate = kendo.toString($(""#datetimepickerCamera2"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/dd');
                                                var endTime = kendo.toString($(""#datetimepickerCamera2"").data(""kendoDateTimePicker"").value(), 'HH:mm');
                                                //console.log(startDate.replaceAll('/', '-') + ' ' + startTime);
                                                //console.log(endDate.repl");
                WriteLiteral("aceAll(\'/\', \'-\') + \' \' + endTime);\r\n                                                //console.log(\'");
                EndContext();
                BeginContext(18499, 9, false);
#line 303 "C:\Users\AJack Ti\Documents\GitHub\Project-Monitor-Baby\WebApplication\WebApplication\Views\Home\Dashboard.cshtml"
                                                          Write(ipAddress);

#line default
#line hidden
                EndContext();
                BeginContext(18508, 507, true);
                WriteLiteral(@":5002/api/camera/' + startDate.replaceAll('/', '-') + ' ' + startTime + '/' + endDate.replaceAll('/', '-') + ' ' + endTime);
                                                //debugger;
                                                $.ajax({
                                                    type: 'GET',
                                                    dataType: 'json',
                                                    cache: false,
                                                    url: '");
                EndContext();
                BeginContext(19016, 9, false);
#line 309 "C:\Users\AJack Ti\Documents\GitHub\Project-Monitor-Baby\WebApplication\WebApplication\Views\Home\Dashboard.cshtml"
                                                     Write(ipAddress);

#line default
#line hidden
                EndContext();
                BeginContext(19025, 1824, true);
                WriteLiteral(@":5002/api/camera/' + startDate.replaceAll('/', '-') + ' ' + startTime + '/' + endDate.replaceAll('/', '-') + ' ' + endTime,
                                                    contentType: 'application/json; charset=utf-8',
                                                    success: function (result) {
                                                        //console.log(result);
                                                        setUpCameraChart(result);
                                                    },
                                                    error: function (result) {
                                                        //console.log(result);
                                                    }

                                                });

                                                $('#datetimepickerCamera1, #datetimepickerCamera2').change(function () {
                                                    //debugger;
                                      ");
                WriteLiteral(@"              var startDate = kendo.toString($(""#datetimepickerCamera1"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/dd');
                                                    var startTime = kendo.toString($(""#datetimepickerCamera1"").data(""kendoDateTimePicker"").value(), 'HH:mm');
                                                    var endDate = kendo.toString($(""#datetimepickerCamera2"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/dd');
                                                    var endTime = kendo.toString($(""#datetimepickerCamera2"").data(""kendoDateTimePicker"").value(), 'HH:mm');
                                                    //console.log(startDate + ' ' + startTime + ' ' + endDate + ' ' + endTime);
                                                    //console.log('");
                EndContext();
                BeginContext(20850, 9, false);
#line 328 "C:\Users\AJack Ti\Documents\GitHub\Project-Monitor-Baby\WebApplication\WebApplication\Views\Home\Dashboard.cshtml"
                                                              Write(ipAddress);

#line default
#line hidden
                EndContext();
                BeginContext(20859, 466, true);
                WriteLiteral(@":5002/api/camera/' + startDate.replaceAll('/', '-') + ' ' + startTime + '/' + endDate.replaceAll('/', '-') + ' ' + endTime);
                                                    $.ajax({
                                                        type: 'GET',
                                                        dataType: 'json',
                                                        cache: false,
                                                        url: '");
                EndContext();
                BeginContext(21326, 9, false);
#line 333 "C:\Users\AJack Ti\Documents\GitHub\Project-Monitor-Baby\WebApplication\WebApplication\Views\Home\Dashboard.cshtml"
                                                         Write(ipAddress);

#line default
#line hidden
                EndContext();
                BeginContext(21335, 5338, true);
                WriteLiteral(@":5002/api/camera/' + startDate.replaceAll('/', '-') + ' ' + startTime + '/' + endDate.replaceAll('/', '-') + ' ' + endTime,
                                                        contentType: 'application/json; charset=utf-8',
                                                        success: function (result) {
                                                            //console.log(result);
                                                            setUpCameraChart(result);
                                                        },
                                                        error: function (result) {
                                                            //console.log(result);
                                                        }
                                                    });
                                                });
                                            });
                                        </script>

                                    </");
                WriteLiteral(@"div>

                                    <script>
                                        function setUpCameraChart(data) {
                                            var startDate = kendo.toString($(""#datetimepickerCamera1"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/dd');
                                            var startTime = kendo.toString($(""#datetimepickerCamera1"").data(""kendoDateTimePicker"").value(), 'hh:mm tt');
                                            var endDate = kendo.toString($(""#datetimepickerCamera2"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/dd');
                                            var endTime = kendo.toString($(""#datetimepickerCamera2"").data(""kendoDateTimePicker"").value(), 'hh:mm tt');

                                            Highcharts.chart('cameraChart', {
                                                chart: {
                                                    type: 'area'
                                                },
                      ");
                WriteLiteral(@"                          title: {
                                                    text: 'Camera Detection Between ' + startDate + ' ' + startTime + ' And ' + endDate + ' ' + endTime
                                                },
                                                xAxis: {
                                                    allowDecimals: false,
                                                    labels: {
                                                        formatter: function () {
                                                            return this.value; // clean, unformatted number for year
                                                        }
                                                    }
                                                },
                                                yAxis: {
                                                    title: {
                                                        text: 'Camera Detection Times'
             ");
                WriteLiteral(@"                                       },
                                                    labels: {
                                                        formatter: function () {
                                                            return this.value;
                                                        }
                                                    }
                                                },
                                                tooltip: {
                                                    pointFormat: '{series.name} had <b>{point.y:,.0f}</b><br/>time in {point.x}'
                                                },
                                                plotOptions: {
                                                    area: {
                                                        pointStart: 0,
                                                        marker: {
                                                            enabled: false,
       ");
                WriteLiteral(@"                                                     symbol: 'circle',
                                                            radius: 2,
                                                            states: {
                                                                hover: {
                                                                    enabled: true
                                                                }
                                                            }
                                                        }
                                                    }
                                                },
                                                series: [{
                                                    name: 'Camera Detection',
                                                    data: data.map(a => a.Parameter),
                                                    color: 'rgba(244, 91, 91, 0.75);'
                                           ");
                WriteLiteral("     }]\r\n                                            });\r\n                                        }</script>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n");
                EndContext();
                BeginContext(26721, 71, true);
                WriteLiteral("                    </div>\r\n\r\n\r\n                    <div class=\"row\">\r\n");
                EndContext();
                BeginContext(26842, 2842, true);
                WriteLiteral(@"                        <div class=""col-md-6"">
                            <div class=""card "">
                                <div class=""header"">
                                    <h4 class=""title"">Sound Chart</h4>
                                    <p class=""category"">Sound Detection</p>
                                    <div id=""soundChart""></div>
                                    <div id=""example"">

                                        <div class=""demo-section k-content"">
                                            <div style=""display: inline-block; width: 100%"">
                                                <input id=""datetimepickerSound1"" title=""datetimepickerSound1"" style=""width: 50%; float: left;"" />
                                                <input id=""datetimepickerSound2"" title=""datetimepickerSound2"" style=""width: 50%; float: right;"" />
                                            </div>
                                        </div>

                                ");
                WriteLiteral(@"        <script>
                                            $(document).ready(function () {
                                                // create DateTimePicker from input HTML element
                                                $(""#datetimepickerSound1"").kendoDateTimePicker({
                                                    value: new Date(),
                                                    dateInput: true
                                                });

                                                $(""#datetimepickerSound2"").kendoDateTimePicker({
                                                    value: new Date(),
                                                    dateInput: true
                                                });

                                                String.prototype.replaceAll = function (search, replacement) {
                                                    var target = this;
                                                    return ");
                WriteLiteral(@"target.replace(new RegExp(search, 'g'), replacement);
                                                };

                                                var startDate = kendo.toString($(""#datetimepickerSound1"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/dd');
                                                var startTime = kendo.toString($(""#datetimepickerSound1"").data(""kendoDateTimePicker"").value(), 'HH:mm');
                                                var endDate = kendo.toString($(""#datetimepickerSound2"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/dd');
                                                var endTime = kendo.toString($(""#datetimepickerSound2"").data(""kendoDateTimePicker"").value(), 'HH:mm');
                                                //console.log('");
                EndContext();
                BeginContext(29685, 9, false);
#line 452 "C:\Users\AJack Ti\Documents\GitHub\Project-Monitor-Baby\WebApplication\WebApplication\Views\Home\Dashboard.cshtml"
                                                          Write(ipAddress);

#line default
#line hidden
                EndContext();
                BeginContext(29694, 514, true);
                WriteLiteral(@":5002/api/sensorsound/' + startDate.replaceAll('/', '-') + ' ' + startTime + '/' + endDate.replaceAll('/', '-') + ' ' + endTime);

                                                //debugger;
                                                $.ajax({
                                                    type: 'GET',
                                                    dataType: 'json',
                                                    cache: false,
                                                    url: '");
                EndContext();
                BeginContext(30209, 9, false);
#line 459 "C:\Users\AJack Ti\Documents\GitHub\Project-Monitor-Baby\WebApplication\WebApplication\Views\Home\Dashboard.cshtml"
                                                     Write(ipAddress);

#line default
#line hidden
                EndContext();
                BeginContext(30218, 1822, true);
                WriteLiteral(@":5002/api/sensorsound/' + startDate.replaceAll('/', '-') + ' ' + startTime + '/' + endDate.replaceAll('/', '-') + ' ' + endTime,
                                                    contentType: 'application/json; charset=utf-8',
                                                    success: function (result) {
                                                        //console.log(result);
                                                        setUpSoundChart(result);
                                                    },
                                                    error: function (result) {
                                                        //console.log(result);
                                                    }

                                                });

                                                $('#datetimepickerSound1, #datetimepickerSound2').change(function () {
                                                    //debugger;
                                    ");
                WriteLiteral(@"                var startDate = kendo.toString($(""#datetimepickerSound1"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/dd');
                                                    var startTime = kendo.toString($(""#datetimepickerSound1"").data(""kendoDateTimePicker"").value(), 'HH:mm');
                                                    var endDate = kendo.toString($(""#datetimepickerSound2"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/dd');
                                                    var endTime = kendo.toString($(""#datetimepickerSound2"").data(""kendoDateTimePicker"").value(), 'HH:mm');
                                                    //console.log(startDate + ' ' + startTime + ' ' + endDate + ' ' + endTime);
                                                    //console.log('");
                EndContext();
                BeginContext(32041, 9, false);
#line 478 "C:\Users\AJack Ti\Documents\GitHub\Project-Monitor-Baby\WebApplication\WebApplication\Views\Home\Dashboard.cshtml"
                                                              Write(ipAddress);

#line default
#line hidden
                EndContext();
                BeginContext(32050, 471, true);
                WriteLiteral(@":5002/api/sensorsound/' + startDate.replaceAll('/', '-') + ' ' + startTime + '/' + endDate.replaceAll('/', '-') + ' ' + endTime);
                                                    $.ajax({
                                                        type: 'GET',
                                                        dataType: 'json',
                                                        cache: false,
                                                        url: '");
                EndContext();
                BeginContext(32522, 9, false);
#line 483 "C:\Users\AJack Ti\Documents\GitHub\Project-Monitor-Baby\WebApplication\WebApplication\Views\Home\Dashboard.cshtml"
                                                         Write(ipAddress);

#line default
#line hidden
                EndContext();
                BeginContext(32531, 3776, true);
                WriteLiteral(@":5002/api/sensorsound/' + startDate.replaceAll('/', '-') + ' ' + startTime + '/' + endDate.replaceAll('/', '-') + ' ' + endTime,
                                                        contentType: 'application/json; charset=utf-8',
                                                        success: function (result) {
                                                            //console.log(result);
                                                            setUpSoundChart(result);
                                                        },
                                                        error: function (result) {
                                                            //console.log(result);
                                                        }
                                                    });
                                                });
                                            });
                                        </script>

                                  ");
                WriteLiteral(@"  </div>
                                </div>
                                <script>
                                    function setUpSoundChart(data) {
                                        var startDate = kendo.toString($(""#datetimepickerSound1"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/dd');
                                        var startTime = kendo.toString($(""#datetimepickerSound1"").data(""kendoDateTimePicker"").value(), 'hh:mm tt');
                                        var endDate = kendo.toString($(""#datetimepickerSound2"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/dd');
                                        var endTime = kendo.toString($(""#datetimepickerSound2"").data(""kendoDateTimePicker"").value(), 'hh:mm tt');


                                        Highcharts.chart('soundChart', {
                                            chart: {
                                                type: 'line'
                                            },
                        ");
                WriteLiteral(@"                    title: {
                                                text: 'Sound Sensor Between ' + startDate + ' ' + startTime + ' And ' + endDate + ' ' + endTime
                                            },
                                            xAxis: {
                                                categories: data.map(a => a.TimeStart.split(' ')[1].toString('hh:MM:ss TT'))
                                            },
                                            yAxis: {
                                                title: {
                                                    text: 'Sound Sensor Times'
                                                }
                                            },
                                            plotOptions: {
                                                line: {
                                                    dataLabels: {
                                                        enabled: true
                           ");
                WriteLiteral(@"                         },
                                                    enableMouseTracking: false
                                                }
                                            },
                                            series: [{
                                                name: 'Sound Sensor',
                                                data: data.map(a => a.Parameter),
                                                color: 'rgb(169, 255, 151)'
                                            }]
                                        });
                                    }</script>
                            </div>
                        </div>
");
                EndContext();
                BeginContext(36361, 2, true);
                WriteLiteral("\r\n");
                EndContext();
                BeginContext(36412, 4172, true);
                WriteLiteral(@"                        <div class=""col-md-6"">
                            <div class=""card "">
                                <div class=""header"">
                                    <h4 class=""title"">Combination Chart</h4>
                                </div>
                                <div class=""content"" style=""height: 462px"">
                                    <div class=""table-full-width"">
                                        <div id=""combinationChart""></div>

                                        <div id=""example"">

                                            <div class=""demo-section k-content"">
                                                <div style=""display: inline-block; width: 100%"">
                                                    <input id=""datetimepickerCombination1"" title=""datetimepickerCombination1"" style=""width: 50%; float: left;"" />
                                                    <input id=""datetimepickerCombination2"" title=""datetimepickerCombination2"" st");
                WriteLiteral(@"yle=""width: 50%; float: right;"" />
                                                </div>
                                            </div>

                                            <script>
                                                $(document).ready(function () {
                                                    // create DateTimePicker from input HTML element
                                                    $(""#datetimepickerCombination1"").kendoDateTimePicker({
                                                        value: new Date(),
                                                        dateInput: true
                                                    });

                                                    $(""#datetimepickerCombination2"").kendoDateTimePicker({
                                                        value: new Date(),
                                                        dateInput: true
                                                    });

         ");
                WriteLiteral(@"                                           var startDate = kendo.toString($(""#datetimepickerCombination1"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/dd');
                                                    var startTime = kendo.toString($(""#datetimepickerCombination1"").data(""kendoDateTimePicker"").value(), 'HH:mm');
                                                    var endDate = kendo.toString($(""#datetimepickerCombination2"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/dd');
                                                    var endTime = kendo.toString($(""#datetimepickerCombination2"").data(""kendoDateTimePicker"").value(), 'HH:mm');

                                                    //#region CHANGE
                                                    $(""#datetimepickerCombination1, #datetimepickerCombination2"").change(function () {
                                                        startDate = kendo.toString($(""#datetimepickerCombination1"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/d");
                WriteLiteral(@"d');
                                                        startTime = kendo.toString($(""#datetimepickerCombination1"").data(""kendoDateTimePicker"").value(), 'HH:mm');
                                                        endDate = kendo.toString($(""#datetimepickerCombination2"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/dd');
                                                        endTime = kendo.toString($(""#datetimepickerCombination2"").data(""kendoDateTimePicker"").value(), 'HH:mm');

                                                        var dataResult = []

                                                        // Get Data Of Sound Sensor
                                                        $.ajax({
                                                            type: 'GET',
                                                            dataType: 'json',
                                                            cache: false,
                                                            async");
                WriteLiteral(": false,\r\n                                                            url: \'");
                EndContext();
                BeginContext(40585, 9, false);
#line 593 "C:\Users\AJack Ti\Documents\GitHub\Project-Monitor-Baby\WebApplication\WebApplication\Views\Home\Dashboard.cshtml"
                                                             Write(ipAddress);

#line default
#line hidden
                EndContext();
                BeginContext(40594, 2221, true);
                WriteLiteral(@":5002/api/sensorsound/' + startDate.replaceAll('/', '-') + ' ' + startTime + '/' + endDate.replaceAll('/', '-') + ' ' + endTime,
                                                            contentType: 'application/json; charset=utf-8',
                                                            success: function (result) {
                                                                //console.log(result.length);
                                                                Array.prototype.sum = function (prop) {
                                                                    var total = 0
                                                                    for (var i = 0, _len = this.length; i < _len; i++) {
                                                                        total += this[i][prop]
                                                                    }
                                                                    return total
                                         ");
                WriteLiteral(@"                       }
                                                                var total = result.sum(""Parameter"");
                                                                //console.log(total);
                                                                dataResult.push({ ""Sound"": total });
                                                            },
                                                            error: function (result) {
                                                                //console.log(result);
                                                            }

                                                        });
                                                        // Get Data Of Camera
                                                        $.ajax({
                                                            type: 'GET',
                                                            dataType: 'json',
                                           ");
                WriteLiteral("                 cache: false,\r\n                                                            async: false,\r\n                                                            url: \'");
                EndContext();
                BeginContext(42816, 9, false);
#line 619 "C:\Users\AJack Ti\Documents\GitHub\Project-Monitor-Baby\WebApplication\WebApplication\Views\Home\Dashboard.cshtml"
                                                             Write(ipAddress);

#line default
#line hidden
                EndContext();
                BeginContext(42825, 2221, true);
                WriteLiteral(@":5002/api/camera/' + startDate.replaceAll('/', '-') + ' ' + startTime + '/' + endDate.replaceAll('/', '-') + ' ' + endTime,
                                                            contentType: 'application/json; charset=utf-8',
                                                            success: function (result) {
                                                                //console.log(result.length);
                                                                Array.prototype.sum = function (prop) {
                                                                    var total = 0
                                                                    for (var i = 0, _len = this.length; i < _len; i++) {
                                                                        total += this[i][prop]
                                                                    }
                                                                    return total
                                              ");
                WriteLiteral(@"                  }
                                                                var total = result.sum(""Parameter"");
                                                                //console.log(total);
                                                                dataResult.push({""Camera"" : total});
                                                            },
                                                            error: function (result) {
                                                                //console.log(result);
                                                            }
                                                        });
                                                        // Get Data Of Motion Sensor
                                                        $.ajax({
                                                            type: 'GET',
                                                            dataType: 'json',
                                           ");
                WriteLiteral("                 cache: false,\r\n                                                            async: false,\r\n                                                            url: \'");
                EndContext();
                BeginContext(45047, 9, false);
#line 644 "C:\Users\AJack Ti\Documents\GitHub\Project-Monitor-Baby\WebApplication\WebApplication\Views\Home\Dashboard.cshtml"
                                                             Write(ipAddress);

#line default
#line hidden
                EndContext();
                BeginContext(45056, 3034, true);
                WriteLiteral(@":5002/api/sensormotion/' + startDate.replaceAll('/', '-') + ' ' + startTime + '/None',
                                                            contentType: 'application/json; charset=utf-8',
                                                            success: function (result) {
                                                                //console.log(result.length);
                                                                Array.prototype.sum = function (prop) {
                                                                    var total = 0
                                                                    for (var i = 0, _len = this.length; i < _len; i++) {
                                                                        total += this[i][prop]
                                                                    }
                                                                    return total
                                                                }
                ");
                WriteLiteral(@"                                                var total = result.sum(""quantity"");
                                                                //console.log(total);
                                                                dataResult.push({ ""Motion"": total });
                                                            },
                                                            error: function (result) {
                                                                //console.log(result);
                                                            }
                                                        });

                                                        //debugger;
                                                        //console.log(dataResult);
                                                        var result = Calculation(dataResult);
                                                        if (result === -1) {
                                                         ");
                WriteLiteral(@"   return;
                                                        }
                                                        setUpCombinationChart(result);
                                                        return;
                                                    })
                                                    //#endregion

                                                    //#region NORMAL

                                                    var dataResult = [];
                                                    // Get Data Of Sound Sensor
                                                    $.ajax({
                                                        type: 'GET',
                                                        dataType: 'json',
                                                        cache: false,
                                                        async: false,
                                                        url: '");
                EndContext();
                BeginContext(48091, 9, false);
#line 684 "C:\Users\AJack Ti\Documents\GitHub\Project-Monitor-Baby\WebApplication\WebApplication\Views\Home\Dashboard.cshtml"
                                                         Write(ipAddress);

#line default
#line hidden
                EndContext();
                BeginContext(48100, 2121, true);
                WriteLiteral(@":5002/api/sensorsound/' + startDate.replaceAll('/', '-') + ' ' + startTime + '/' + endDate.replaceAll('/', '-') + ' ' + endTime,
                                                        contentType: 'application/json; charset=utf-8',
                                                        success: function (result) {
                                                            //console.log(result.length);
                                                            Array.prototype.sum = function (prop) {
                                                                var total = 0
                                                                for (var i = 0, _len = this.length; i < _len; i++) {
                                                                    total += this[i][prop]
                                                                }
                                                                return total
                                                            }
              ");
                WriteLiteral(@"                                              var total = result.sum(""Parameter"");
                                                            //console.log(total);
                                                            dataResult.push({ ""Sound"": total });
                                                        },
                                                        error: function (result) {
                                                            //console.log(result);
                                                        }

                                                    });
                                                    // Get Data Of Camera
                                                    $.ajax({
                                                        type: 'GET',
                                                        dataType: 'json',
                                                        cache: false,
                                                        asyn");
                WriteLiteral("c: false,\r\n                                                        url: \'");
                EndContext();
                BeginContext(50222, 9, false);
#line 710 "C:\Users\AJack Ti\Documents\GitHub\Project-Monitor-Baby\WebApplication\WebApplication\Views\Home\Dashboard.cshtml"
                                                         Write(ipAddress);

#line default
#line hidden
                EndContext();
                BeginContext(50231, 2122, true);
                WriteLiteral(@":5002/api/camera/' + startDate.replaceAll('/', '-') + ' ' + startTime + '/' + endDate.replaceAll('/', '-') + ' ' + endTime,
                                                        contentType: 'application/json; charset=utf-8',
                                                        success: function (result) {
                                                            //console.log(result.length);
                                                            Array.prototype.sum = function (prop) {
                                                                var total = 0
                                                                for (var i = 0, _len = this.length; i < _len; i++) {
                                                                    total += this[i][prop]
                                                                }
                                                                return total
                                                            }
                   ");
                WriteLiteral(@"                                         var total = result.sum(""Parameter"");
                                                            //console.log(total);
                                                            dataResult.push({ ""Camera"": total });
                                                        },
                                                        error: function (result) {
                                                            //console.log(result);
                                                        }
                                                    });
                                                    // Get Data Of Motion Sensor
                                                    $.ajax({
                                                        type: 'GET',
                                                        dataType: 'json',
                                                        cache: false,
                                                        asy");
                WriteLiteral("nc: false,\r\n                                                        url: \'");
                EndContext();
                BeginContext(52354, 9, false);
#line 735 "C:\Users\AJack Ti\Documents\GitHub\Project-Monitor-Baby\WebApplication\WebApplication\Views\Home\Dashboard.cshtml"
                                                         Write(ipAddress);

#line default
#line hidden
                EndContext();
                BeginContext(52363, 7333, true);
                WriteLiteral(@":5002/api/sensormotion/' + startDate.replaceAll('/', '-') + ' ' + startTime + '/None',
                                                        contentType: 'application/json; charset=utf-8',
                                                        success: function (result) {
                                                            //console.log(result.length);
                                                            Array.prototype.sum = function (prop) {
                                                                var total = 0
                                                                for (var i = 0, _len = this.length; i < _len; i++) {
                                                                    total += this[i][prop]
                                                                }
                                                                return total
                                                            }
                                                        ");
                WriteLiteral(@"    var total = result.sum(""quantity"");
                                                            //console.log(total);
                                                            dataResult.push({ ""Motion"": total });
                                                        },
                                                        error: function (result) {
                                                            //console.log(result);
                                                        }
                                                    });

                                                    var result = Calculation(dataResult);
                                                    if (result === -1) {
                                                            return;
                                                        }
                                                    setUpCombinationChart(result);
                                                    //#endregion NORMAL
     ");
                WriteLiteral(@"                                           });
                                                //#region Calculation Result
                                                function Calculation(dataResult) {
                                                    if (dataResult.length === 0) {
                                                        return -1;
                                                    }
                                                    // Calculate average of them
                                                    var total = dataResult[0][""Sound""] + dataResult[1][""Camera""] + dataResult[2][""Motion""];
                                                    var arrResult =
                                                        [
                                                            {
                                                                name: ""Motion"",
                                                                y: total / dataResult[0][""Sound""]
             ");
                WriteLiteral(@"                                               },
                                                            {
                                                                name: ""Camera"",
                                                                y: total / dataResult[1][""Camera""]
                                                            },
                                                            {
                                                                name: ""Sound"",
                                                                y: total / dataResult[2][""Motion""]
                                                            }
                                                        ]
                                                    dataResult = 0;
                                                    return arrResult;
                                                }
                                                //#endregion Calculation Result
                            ");
                WriteLiteral(@"                </script>

                                        </div>
                                    </div>
                                </div>
                                <script>
                                    function setUpCombinationChart(data) {
                                        var startDate = kendo.toString($(""#datetimepickerCombination1"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/dd');
                                        var startTime = kendo.toString($(""#datetimepickerCombination1"").data(""kendoDateTimePicker"").value(), 'hh:mm tt');
                                        var endDate = kendo.toString($(""#datetimepickerCombination2"").data(""kendoDateTimePicker"").value(), 'yyyy/MM/dd');
                                        var endTime = kendo.toString($(""#datetimepickerCombination2"").data(""kendoDateTimePicker"").value(), 'hh:mm tt');

                                        Highcharts.chart('combinationChart', {
                                           ");
                WriteLiteral(@" chart: {
                                                plotBackgroundColor: null,
                                                plotBorderWidth: null,
                                                plotShadow: false,
                                                type: 'pie'
                                            },
                                            title: {
                                                text: 'Combination 2 Sensors And A Camera Between ' + startDate + ' ' + startTime + ' And ' + endDate + ' ' + endTime
                                            },
                                            tooltip: {
                                                pointFormat: '{series.name}: <b>{point.percentage:.1f}%</b>'
                                            },
                                            plotOptions: {
                                                pie: {
                                                    allowPointSelect: true,
            ");
                WriteLiteral(@"                                        cursor: 'pointer',
                                                    dataLabels: {
                                                        enabled: true,
                                                        format: '<b>{point.name}</b>: {point.percentage:.1f} %',
                                                        style: {
                                                            color: (Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black'
                                                        }
                                                    }
                                                }
                                            },
                                            series: [{
                                                name: 'Brands',
                                                colorByPoint: true,
                                                data: data
                                            }]");
                WriteLiteral("\r\n                                        });\r\n\r\n                                    }</script>\r\n                            </div>\r\n                        </div>\r\n");
                EndContext();
                BeginContext(59749, 6917, true);
                WriteLiteral(@"
                        <div id=""advicePopUp"" style=""min-height:800px; display: none;"">
                            <div id=""window"">
                                <h4>ADVICE FOR PARENTS</h4>
                                <p>1. Invest in blackout curtains or make your own. You might not need them during the newborn stage, but they’ll be so worth it later on.</p>
                                <p>2. Some parents swear by infant massage strokes and even gently swiping a tissue over baby’s face to help calm them down and make them sleep— hey, whatever works!</p>
                                <p>3. Muffle that maddening door click by looping a thick rubber band between both door knobs to form an X shape over the latch. Stealthy!</p>
                                <p>
                                    4. Move baby to a crib without waking them:
                                    <br />
                                    — Watch their eyes. If your baby’s eyes are darting under their lids, th");
                WriteLiteral(@"ey’re in deep sleep. Wait until their muscles are relaxed and they’re breathing deeply. Then administer the floppy-arm test: Lift up an arm and drop it. If baby doesn’t stir, you’re good to go.
                                    <br />
                                    — As you ever-so-gently lay them in their crib, keep one hand on their back and the other on their tummy. That continued pressure will ease the transition. If they startle, try patting their belly before you slink away.
                                    <br />
                                    — Try to maintain whatever position they’re in as you pick them up and put them down. Lay your baby flat (not head first) into the crib. Use a step-stool if you need the extra lift.
                                </p>
                                <p>5. Watch for newborns’ wakeful periods. They’re usually only 30 to 60 minutes in the first four months of life; put them to sleep as soon as they seem tired.</p>
                             ");
                WriteLiteral(@"   <p>6. Change your baby’s diaper before the nighttime feed to minimize arousing them. And unless your baby has pooped or soaked through their diaper, you probably don’t want to change them at all in the middle of the night, to keep them in that sleepy state—especially if they’re only waking to feed..</p>
                                <p>7. When you get up for a nighttime feed, don’t turn on the bright lights. Buy an LED push night light that operates on batteries (so you can put it wherever you need it) and turns on with a quick touch. This also helps reduce the “wake-up” signals going to the parent and baby’s brains so it’s easier to fall back to sleep after feeding.</p>
                                <p>8. Put a hot water bottle in the bassinet or crib, which will warm it up and can sometimes make the transfer from your arms to bed a little easier. (Don’t forget to remove the hot water bottle before the baby is in!)</p>
                                <p>9. Babies are born without a well-developed c");
                WriteLiteral(@"ircadian rhythm— they’re awake in the middle of the night, and you can’t fix that, at least for the first few months. Plan for this by sleeping in shifts with your partner or support person.</p>
                                <p>10. If your baby is sleeping in your room (as per the Canadian Paediatric Society recommendation), you’ll want to be able to get yourself into bed without waking them up. Use a white noise machine, and do all your bedtime prep out of the bedroom, “so you’re just ninja-ing in.”</p>
                                <p>11. If they fall asleep in your arms during the day, don’t worry about putting them in a crib or bassinet. Put them down somewhere safe, which may even be the floor. (Not applicable if you have dogs or toddlers at home with you!) And if you’re feeling very tired, be careful you don’t fall asleep with baby on you.</p>
                                <p>12. Enjoy this period of portable naps. Sit at the coffee shop with your baby sleeping at your feet. “Enjoy your mobilit");
                WriteLiteral(@"y while you can, because there will be three years after that when you can’t.”</p>
                                <p style=""color: fuchsia"">10 Top Sleep Tips For New Parents<a> www.todaysparent.com</a></p>
                            </div>

                            <span id=""undo"" style=""display:none; text-align: center;position: absolute;white-space: nowrap;padding: 1em;cursor: pointer;"" class=""k-button hide-on-narrow"">Click here to open the window.</span>

                            <div class=""responsive-message""></div>

                            <script>
                                $(document).ready(function () {
                                    $('#adviceClick').click(function () {
                                        if (true) {

                                        }
                                        var myWindow = $(""#window""),
                                            undo = $(""#undo"");

                                        undo.click(function () {
  ");
                WriteLiteral(@"                                          myWindow.data(""kendoWindow"").open();
                                            undo.fadeOut();
                                        });

                                        function onClose() {
                                            undo.fadeIn();
                                        }

                                        myWindow.kendoWindow({
                                            width: ""800px"",
                                            title: ""ADIVCE POPUP"",
                                            visible: false,
                                            actions: [
                                                ""Pin"",
                                                ""Minimize"",
                                                ""Maximize"",
                                                ""Close""
                                            ],
                                            close: onClose
                ");
                WriteLiteral(@"                        }).data(""kendoWindow"").center().open();
                                    })

                                });</script>

                            <style>
                                .armchair img {
                                }

                                .k-window-content a {
                                    color: #BBB;
                                }

                                .k-window-content p {
                                    margin-bottom: 1em;
                                }
                            </style>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <!--   Core JS Files   -->
    ");
                EndContext();
                BeginContext(66666, 78, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "4fdbb8a5be85ff13fa40e42cbe302c6cb58c1dc297754", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_10);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_11);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(66744, 6, true);
                WriteLiteral("\r\n    ");
                EndContext();
                BeginContext(66750, 75, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "4fdbb8a5be85ff13fa40e42cbe302c6cb58c1dc299101", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_12);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_11);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(66825, 37, true);
                WriteLiteral("\r\n\r\n    <!--  Charts Plugin -->\r\n    ");
                EndContext();
                BeginContext(66862, 51, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "4fdbb8a5be85ff13fa40e42cbe302c6cb58c1dc2100484", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_13);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(66913, 47, true);
                WriteLiteral("\r\n\r\n    <!--  Notifications Plugin    -->\r\n    ");
                EndContext();
                BeginContext(66960, 55, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "4fdbb8a5be85ff13fa40e42cbe302c6cb58c1dc2101790", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_14);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(67015, 264, true);
                WriteLiteral(@"

    <!--  Google Maps Plugin    -->
    <script type=""text/javascript"" src=""https://maps.googleapis.com/maps/api/js?key=AIzaSyCdanJlxl4OLIxvUC5IXfH2E-rYKuROMwU""></script>

    <!-- Light Bootstrap Table Core javascript and methods for Demo purpose -->
    ");
                EndContext();
                BeginContext(67279, 72, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "4fdbb8a5be85ff13fa40e42cbe302c6cb58c1dc2103313", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_15);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(67351, 92, true);
                WriteLiteral("\r\n\r\n    <!-- Light Bootstrap Table DEMO methods, don\'t include it in your project! -->\r\n    ");
                EndContext();
                BeginContext(67443, 43, false);
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "4fdbb8a5be85ff13fa40e42cbe302c6cb58c1dc2104665", async() => {
                }
                );
                __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
                __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_16);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                EndContext();
                BeginContext(67486, 4, true);
                WriteLiteral("\r\n\r\n");
                EndContext();
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(67497, 11, true);
            WriteLiteral("\r\n</html>\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
